x-base-app: &base_app
  image: ghcr.io/sojusanapps/my-game-list-backend/app:latest
  build:
    context: ./app
    args:
      - MGL_LOG_DIR_PATH=${MGL_LOG_DIR_PATH}
  volumes:
    - static_volume:/opt/my_game_list/static
    - media_volume:/opt/my_game_list/media
    - type: volume
      source: app_log_volume
      target: ${MGL_LOG_DIR_PATH}
  env_file:
    - ./.env
  networks:
    - loki

services:
  postgres:
    image: postgres:15.3-alpine
    container_name: my-game-list-postgres
    restart: "unless-stopped"
    ports:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - loki

  app:
    <<: *base_app
    container_name: my-game-list-app
    restart: "unless-stopped"
    depends_on:
      postgres:
        condition: service_healthy
      set_state:
        condition: service_completed_successfully
    command: gunicorn
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/version/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  set_state:
    <<: *base_app
    container_name: my-game-list-set-state
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
    command: set_state
    volumes:
      - static_volume:/opt/my_game_list/static

  nginx:
    image: ghcr.io/sojusanapps/my-game-list-backend/nginx:latest
    container_name: my-game-list-nginx
    build:
      context: ./nginx
    restart: "unless-stopped"
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/opt/my_game_list/static
      - media_volume:/opt/my_game_list/media
    networks:
      - loki

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: my-game-list-prometheus
    restart: "unless-stopped"
    ports:
      - "9090:9090"
    depends_on:
      app:
        condition: service_healthy
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - loki

  grafana:
    image: grafana/grafana:9.5.2
    container_name: my-game-list-grafana
    restart: "unless-stopped"
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    env_file:
      - ./.env
    networks:
      - loki

  loki:
    image: grafana/loki:2.8.2
    container_name: my-game-list-loki
    ports:
      - "3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - loki

  promtail:
    image: grafana/promtail:2.8.2
    container_name: my-game-list-promtail
    volumes:
      - ./promtail/promtail.yml:/etc/promtail/promtail.yml
      - app_log_volume:/var/log/my_game_list
    command: -config.file=/etc/promtail/promtail.yml
    networks:
      - loki

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  static_volume:
  media_volume:
  app_log_volume:

networks:
  loki:
