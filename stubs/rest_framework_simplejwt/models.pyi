from .compat import CallableFalse as CallableFalse, CallableTrue as CallableTrue
from .settings import api_settings as api_settings
from _typeshed import Incomplete

class TokenUser:
    is_active: bool
    token: Incomplete
    def __init__(self, token: Incomplete) -> None: ...
    def id(self) -> Incomplete: ...
    def pk(self) -> Incomplete: ...
    def username(self) -> Incomplete: ...
    def is_staff(self) -> Incomplete: ...
    def is_superuser(self) -> Incomplete: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...
    def __ne__(self, other: Incomplete) -> Incomplete: ...
    def __hash__(self: Incomplete) -> Incomplete: ...
    def save(self) -> None: ...
    def delete(self) -> None: ...
    def set_password(self, raw_password: Incomplete) -> None: ...
    def check_password(self, raw_password: Incomplete) -> None: ...
    @property
    def groups(self) -> Incomplete: ...
    @property
    def user_permissions(self) -> Incomplete: ...
    def get_group_permissions(self, obj: Incomplete | None = ...) -> Incomplete: ...
    def get_all_permissions(self, obj: Incomplete | None = ...) -> Incomplete: ...
    def has_perm(self, perm: Incomplete, obj: Incomplete | None = ...) -> Incomplete: ...
    def has_perms(self, perm_list: Incomplete, obj: Incomplete | None = ...) -> Incomplete: ...
    def has_module_perms(self, module: Incomplete) -> Incomplete: ...
    @property
    def is_anonymous(self) -> Incomplete: ...
    @property
    def is_authenticated(self) -> Incomplete: ...
    def get_username(self) -> Incomplete: ...
    def __getattr__(self, attr: Incomplete) -> Incomplete: ...
