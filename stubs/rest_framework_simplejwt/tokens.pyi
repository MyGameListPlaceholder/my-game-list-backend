from .exceptions import TokenBackendError as TokenBackendError, TokenError as TokenError
from .settings import api_settings as api_settings
from .token_blacklist.models import BlacklistedToken as BlacklistedToken, OutstandingToken as OutstandingToken
from .utils import (
    aware_utcnow as aware_utcnow,
    datetime_from_epoch as datetime_from_epoch,
    datetime_to_epoch as datetime_to_epoch,
    format_lazy as format_lazy,
)
from .backends import TokenBackend
from .models import TokenUser
from typing import TypeVar
from django.contrib.auth.models import AbstractBaseUser
from datetime import datetime, timedelta
from _typeshed import Incomplete

AuthUser = TypeVar("AuthUser", AbstractBaseUser, TokenUser)

class Token:
    token_type: str | None
    lifetime: timedelta | None
    token: Token | None
    current_time: datetime
    payload: Incomplete
    def __init__(self, token: Incomplete | None = ..., verify: bool = ...) -> None: ...
    def __getitem__(self, key: str) -> Incomplete: ...
    def __setitem__(self, key: str, value: Incomplete) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __contains__(self, key: str) -> bool: ...
    def get(self, key: str, default: Incomplete | None = ...) -> Incomplete: ...
    def verify(self) -> None: ...
    def verify_token_type(self) -> None: ...
    def set_jti(self) -> None: ...
    def set_exp(
        self, claim: str = ..., from_time: Incomplete | None = ..., lifetime: Incomplete | None = ...
    ) -> None: ...
    def set_iat(self, claim: str = ..., at_time: Incomplete | None = ...) -> None: ...
    def check_exp(self, claim: str = ..., current_time: Incomplete | None = ...) -> None: ...
    @classmethod
    def for_user(cls, user: AuthUser) -> Token: ...
    @property
    def token_backend(self) -> TokenBackend: ...
    def get_token_backend(self) -> TokenBackend: ...

class BlacklistMixin:
    def verify(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def check_blacklist(self) -> None: ...
    def blacklist(self) -> BlacklistedToken: ...
    @classmethod
    def for_user(cls, user: AuthUser) -> Token: ...

class SlidingToken(BlacklistMixin, Token):
    token_type = "sliding"
    lifetime: timedelta
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...

class AccessToken(Token):
    token_type = "access"
    lifetime: timedelta

class RefreshToken(BlacklistMixin, Token):
    token_type = "refresh"
    lifetime: timedelta
    no_copy_claims: tuple[str, str, str, str]
    access_token_class = AccessToken
    @property
    def access_token(self) -> AccessToken: ...

class UntypedToken(Token):
    token_type = "untyped"
    lifetime: timedelta
    def verify_token_type(self) -> None: ...
