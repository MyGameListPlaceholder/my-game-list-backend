from _typeshed import Incomplete

builtin_repr = repr
reprlib: Incomplete

class Code:
    filename: Incomplete
    firstlineno: Incomplete
    name: Incomplete
    raw: Incomplete
    def __init__(self, rawcode: Incomplete) -> None: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...
    def __ne__(self, other: Incomplete) -> Incomplete: ...
    @property
    def path(self) -> Incomplete: ...
    @property
    def fullsource(self) -> Incomplete: ...
    def source(self) -> Incomplete: ...
    def getargs(self, var: bool = ...) -> Incomplete: ...

class Frame:
    lineno: Incomplete
    f_globals: Incomplete
    f_locals: Incomplete
    raw: Incomplete
    code: Incomplete
    def __init__(self, frame: Incomplete) -> None: ...
    @property
    def statement(self) -> Incomplete: ...
    def eval(self, code: Incomplete, **vars: Incomplete) -> Incomplete: ...
    def exec_(self, code: Incomplete, **vars: Incomplete) -> None: ...
    def repr(self, object: Incomplete) -> Incomplete: ...
    def is_true(self, object: Incomplete) -> Incomplete: ...
    def getargs(self, var: bool = ...) -> Incomplete: ...

class TracebackEntry:
    exprinfo: Incomplete
    lineno: Incomplete
    def __init__(self, rawentry: Incomplete) -> None: ...
    def set_repr_style(self, mode: Incomplete) -> None: ...
    @property
    def frame(self) -> Incomplete: ...
    @property
    def relline(self) -> Incomplete: ...
    @property
    def statement(self) -> Incomplete: ...
    @property
    def path(self) -> Incomplete: ...
    def getlocals(self) -> Incomplete: ...
    locals: Incomplete
    def reinterpret(self) -> Incomplete: ...
    def getfirstlinesource(self) -> Incomplete: ...
    def getsource(self, astcache: Incomplete | None = ...) -> Incomplete: ...
    source: Incomplete
    def ishidden(self) -> Incomplete: ...
    def name(self) -> Incomplete: ...

class Traceback(list[Incomplete]):
    Entry = TracebackEntry
    def __init__(self, tb: Incomplete) -> None: ...
    def cut(
        self,
        path: Incomplete | None = ...,
        lineno: Incomplete | None = ...,
        firstlineno: Incomplete | None = ...,
        excludepath: Incomplete | None = ...,
    ) -> Incomplete: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def filter(self, fn: Incomplete = ...) -> Incomplete: ...
    def getcrashentry(self) -> Incomplete: ...
    def recursionindex(self) -> Incomplete: ...

co_equal: Incomplete

class ExceptionInfo:
    type: Incomplete
    value: Incomplete
    tb: Incomplete
    typename: Incomplete
    traceback: Incomplete
    def __init__(self, tup: Incomplete | None = ..., exprinfo: Incomplete | None = ...) -> None: ...
    def exconly(self, tryshort: bool = ...) -> Incomplete: ...
    def errisinstance(self, exc: Incomplete) -> Incomplete: ...
    def getrepr(
        self, showlocals: bool = ..., style: str = ..., abspath: bool = ..., tbfilter: bool = ..., funcargs: bool = ...
    ) -> Incomplete: ...
    def __unicode__(self) -> Incomplete: ...

class FormattedExcinfo:
    flow_marker: str
    fail_marker: str
    showlocals: Incomplete
    style: Incomplete
    tbfilter: Incomplete
    funcargs: Incomplete
    abspath: Incomplete
    astcache: Incomplete
    def __init__(
        self, showlocals: bool = ..., style: str = ..., abspath: bool = ..., tbfilter: bool = ..., funcargs: bool = ...
    ) -> None: ...
    def repr_args(self, entry: Incomplete) -> Incomplete: ...
    def get_source(
        self, source: Incomplete, line_index: int = ..., excinfo: Incomplete | None = ..., short: bool = ...
    ) -> Incomplete: ...
    def get_exconly(self, excinfo: Incomplete, indent: int = ..., markall: bool = ...) -> Incomplete: ...
    def repr_locals(self, locals: Incomplete) -> Incomplete: ...
    def repr_traceback_entry(self, entry: Incomplete, excinfo: Incomplete | None = ...) -> Incomplete: ...
    def repr_traceback(self, excinfo: Incomplete) -> Incomplete: ...
    def repr_excinfo(self, excinfo: Incomplete) -> Incomplete: ...

class TerminalRepr:
    def __unicode__(self) -> Incomplete: ...

class ReprExceptionInfo(TerminalRepr):
    reprtraceback: Incomplete
    reprcrash: Incomplete
    sections: Incomplete
    def __init__(self, reprtraceback: Incomplete, reprcrash: Incomplete) -> None: ...
    def addsection(self, name: Incomplete, content: Incomplete, sep: str = ...) -> None: ...
    def toterminal(self, tw: Incomplete) -> None: ...

class ReprTraceback(TerminalRepr):
    entrysep: str
    reprentries: Incomplete
    extraline: Incomplete
    style: Incomplete
    def __init__(self, reprentries: Incomplete, extraline: Incomplete, style: Incomplete) -> None: ...
    def toterminal(self, tw: Incomplete) -> None: ...

class ReprTracebackNative(ReprTraceback):
    style: str
    reprentries: Incomplete
    extraline: Incomplete
    def __init__(self, tblines: Incomplete) -> None: ...

class ReprEntryNative(TerminalRepr):
    style: str
    lines: Incomplete
    def __init__(self, tblines: Incomplete) -> None: ...
    def toterminal(self, tw: Incomplete) -> None: ...

class ReprEntry(TerminalRepr):
    localssep: str
    lines: Incomplete
    reprfuncargs: Incomplete
    reprlocals: Incomplete
    reprfileloc: Incomplete
    style: Incomplete
    def __init__(
        self,
        lines: Incomplete,
        reprfuncargs: Incomplete,
        reprlocals: Incomplete,
        filelocrepr: Incomplete,
        style: Incomplete,
    ) -> None: ...
    def toterminal(self, tw: Incomplete) -> None: ...

class ReprFileLocation(TerminalRepr):
    path: Incomplete
    lineno: Incomplete
    message: Incomplete
    def __init__(self, path: Incomplete, lineno: Incomplete, message: Incomplete) -> None: ...
    def toterminal(self, tw: Incomplete) -> None: ...

class ReprLocals(TerminalRepr):
    lines: Incomplete
    def __init__(self, lines: Incomplete) -> None: ...
    def toterminal(self, tw: Incomplete) -> None: ...

class ReprFuncArgs(TerminalRepr):
    args: Incomplete
    def __init__(self, args: Incomplete) -> None: ...
    def toterminal(self, tw: Incomplete) -> None: ...

oldbuiltins: Incomplete

def patch_builtins(assertion: bool = ..., compile: bool = ...) -> None: ...
def unpatch_builtins(assertion: bool = ..., compile: bool = ...) -> None: ...
def getrawcode(obj: Incomplete, trycall: bool = ...) -> Incomplete: ...
