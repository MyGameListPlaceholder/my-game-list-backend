from _typeshed import Incomplete
from types import ModuleType as ModuleType

cpy_compile = compile

class Source:
    lines: Incomplete
    def __init__(self, *parts: Incomplete, **kwargs: Incomplete) -> None: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...
    def __getitem__(self, key: Incomplete) -> Incomplete: ...
    def __len__(self) -> int: ...
    def __getslice__(self, start: Incomplete, end: Incomplete) -> Incomplete: ...
    def strip(self) -> Incomplete: ...
    def putaround(self, before: str = ..., after: str = ..., indent: Incomplete = ...) -> Incomplete: ...
    def indent(self, indent: Incomplete = ...) -> Incomplete: ...
    def getstatement(self, lineno: Incomplete, assertion: bool = ...) -> Incomplete: ...
    def getstatementrange(self, lineno: Incomplete, assertion: bool = ...) -> Incomplete: ...
    def deindent(self, offset: Incomplete | None = ...) -> Incomplete: ...
    def isparseable(self, deindent: bool = ...) -> Incomplete: ...
    def compile(
        self,
        filename: Incomplete | None = ...,
        mode: str = ...,
        flag: Incomplete = ...,
        dont_inherit: int = ...,
        _genframe: Incomplete | None = ...,
    ) -> Incomplete: ...

def compile_(
    source: Incomplete,
    filename: Incomplete | None = ...,
    mode: str = ...,
    flags: Incomplete = ...,
    dont_inherit: int = ...,
) -> Incomplete: ...
def getfslineno(obj: Incomplete) -> Incomplete: ...
def findsource(obj: Incomplete) -> Incomplete: ...
def getsource(obj: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
def deindent(lines: Incomplete, offset: Incomplete | None = ...) -> Incomplete: ...
def get_statement_startend2(lineno: Incomplete, node: Incomplete) -> Incomplete: ...
def getstatementrange_ast(
    lineno: Incomplete, source: Incomplete, assertion: bool = ..., astnode: Incomplete | None = ...
) -> Incomplete: ...
def getstatementrange_old(lineno: Incomplete, source: Incomplete, assertion: bool = ...) -> Incomplete: ...
