from _typeshed import Incomplete

class BasicCache:
    maxentries: Incomplete
    prunenum: Incomplete
    def __init__(self, maxentries: int = ...) -> None: ...
    def clear(self) -> None: ...
    def delentry(self, key: Incomplete, raising: bool = ...) -> None: ...
    def getorbuild(self, key: Incomplete, builder: Incomplete) -> Incomplete: ...

class BuildcostAccessCache(BasicCache): ...

class WeightedCountingEntry:
    weight: Incomplete
    def __init__(self, value: Incomplete, oneweight: Incomplete) -> None: ...
    def value(self) -> Incomplete: ...

class AgingCache(BasicCache):
    maxseconds: Incomplete
    def __init__(self, maxentries: int = ..., maxseconds: float = ...) -> None: ...

class AgingEntry:
    value: Incomplete
    weight: Incomplete
    def __init__(self, value: Incomplete, expirationtime: Incomplete) -> None: ...
    def isexpired(self) -> Incomplete: ...
