from os import fspath
from _typeshed import Incomplete
from collections.abc import Generator
from py._path import common as common
from py._path.common import iswin32 as iswin32

def map_as_list(func: Incomplete, iter: Incomplete) -> Incomplete: ...

ALLOW_IMPORTLIB_MODE: Incomplete

class Stat:
    def __getattr__(self, name: Incomplete) -> Incomplete: ...
    path: Incomplete
    def __init__(self, path: Incomplete, osstatresult: Incomplete) -> None: ...
    @property
    def owner(self) -> Incomplete: ...
    @property
    def group(self) -> Incomplete: ...
    def isdir(self) -> Incomplete: ...
    def isfile(self) -> Incomplete: ...
    def islink(self) -> Incomplete: ...

class PosixPath(common.PathBase):
    def chown(self, user: Incomplete, group: Incomplete, rec: int = ...) -> Incomplete: ...
    def readlink(self) -> Incomplete: ...
    def mklinkto(self, oldname: Incomplete) -> None: ...
    def mksymlinkto(self, value: Incomplete, absolute: int = ...) -> None: ...

def getuserid(user: Incomplete) -> Incomplete: ...
def getgroupid(group: Incomplete) -> Incomplete: ...

FSBase: Incomplete

class LocalPath(FSBase):  # type: ignore[misc]
    class ImportMismatchError(ImportError): ...
    sep: Incomplete

    class Checkers(common.Checkers):
        def dir(self) -> Incomplete: ...
        def file(self) -> Incomplete: ...
        def exists(self) -> Incomplete: ...
        def link(self) -> Incomplete: ...

    strpath: Incomplete
    def __init__(self, path: Incomplete | None = ..., expanduser: bool = ...) -> None: ...
    def __hash__(self) -> Incomplete: ...
    def __eq__(self, other: Incomplete) -> Incomplete: ...
    def __ne__(self, other: Incomplete) -> Incomplete: ...
    def __lt__(self, other: Incomplete) -> Incomplete: ...
    def __gt__(self, other: Incomplete) -> Incomplete: ...
    def samefile(self, other: Incomplete) -> Incomplete: ...
    def remove(self, rec: int = ..., ignore_errors: bool = ...) -> None: ...
    def computehash(self, hashtype: str = ..., chunksize: int = ...) -> Incomplete: ...
    def new(self, **kw: Incomplete) -> Incomplete: ...
    def dirpath(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def join(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def open(self, mode: str = ..., ensure: bool = ..., encoding: Incomplete | None = ...) -> Incomplete: ...
    def islink(self) -> Incomplete: ...
    def check(self, **kw: Incomplete) -> Incomplete: ...
    def listdir(self, fil: Incomplete | None = ..., sort: Incomplete | None = ...) -> Incomplete: ...
    def size(self) -> Incomplete: ...
    def mtime(self) -> Incomplete: ...
    def copy(self, target: Incomplete, mode: bool = ..., stat: bool = ...) -> Incomplete: ...
    def rename(self, target: Incomplete) -> Incomplete: ...
    def dump(self, obj: Incomplete, bin: int = ...) -> None: ...
    def mkdir(self, *args: Incomplete) -> Incomplete: ...
    def write_binary(self, data: Incomplete, ensure: bool = ...) -> None: ...
    def write_text(self, data: Incomplete, encoding: Incomplete, ensure: bool = ...) -> None: ...
    def write(self, data: Incomplete, mode: str = ..., ensure: bool = ...) -> None: ...
    def ensure(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def stat(self, raising: bool = ...) -> Incomplete: ...
    def lstat(self) -> Incomplete: ...
    def setmtime(self, mtime: Incomplete | None = ...) -> Incomplete: ...
    def chdir(self) -> Incomplete: ...
    def as_cwd(self) -> Generator[Incomplete, None, None]: ...
    def realpath(self) -> Incomplete: ...
    def atime(self) -> Incomplete: ...
    def chmod(self, mode: Incomplete, rec: int = ...) -> None: ...
    def pypkgpath(self) -> Incomplete: ...
    def pyimport(self, modname: Incomplete | None = ..., ensuresyspath: bool = ...) -> Incomplete: ...
    def sysexec(self, *argv: Incomplete, **popen_opts: Incomplete) -> Incomplete: ...
    def sysfind(
        cls, name: Incomplete, checker: Incomplete | None = ..., paths: Incomplete | None = ...
    ) -> Incomplete: ...
    @classmethod
    def get_temproot(cls) -> Incomplete: ...
    @classmethod
    def mkdtemp(cls, rootdir: Incomplete | None = ...) -> Incomplete: ...
    def make_numbered_dir(
        cls, prefix: str = ..., rootdir: Incomplete | None = ..., keep: int = ..., lock_timeout: int = ...
    ) -> Incomplete: ...

def copymode(src: Incomplete, dest: Incomplete) -> None: ...
def copystat(src: Incomplete, dest: Incomplete) -> None: ...
def copychunked(src: Incomplete, dest: Incomplete) -> None: ...
def isimportable(name: Incomplete) -> Incomplete: ...
