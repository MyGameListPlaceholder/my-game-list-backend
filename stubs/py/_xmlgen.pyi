from _typeshed import Incomplete

def u(s: Incomplete) -> Incomplete: ...
def unicode(x: Incomplete, errors: Incomplete | None = ...) -> Incomplete: ...

class NamespaceMetaclass(type):
    def __getattr__(self, name: Incomplete) -> Incomplete: ...

class Tag(list[Incomplete]):
    class Attr:
        def __init__(self, **kwargs: Incomplete) -> None: ...

    attr: Incomplete
    def __init__(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def __unicode__(self) -> Incomplete: ...
    def unicode(self, indent: int = ...) -> Incomplete: ...

Namespace: Incomplete

class HtmlTag(Tag):
    def unicode(self, indent: int = ...) -> Incomplete: ...

class html(Namespace):  # type: ignore[misc]
    __tagclass__ = HtmlTag
    __stickyname__: bool
    __tagspec__: Incomplete

    class Style:
        def __init__(self, **kw: Incomplete) -> None: ...

class raw:
    uniobj: Incomplete
    def __init__(self, uniobj: Incomplete) -> None: ...

class SimpleUnicodeVisitor:
    write: Incomplete
    cache: Incomplete
    visited: Incomplete
    indent: Incomplete
    curindent: Incomplete
    parents: Incomplete
    shortempty: Incomplete
    def __init__(self, write: Incomplete, indent: int = ..., curindent: int = ..., shortempty: bool = ...) -> None: ...
    def visit(self, node: Incomplete) -> None: ...
    def raw(self, obj: Incomplete) -> None: ...
    def list(self, obj: Incomplete) -> None: ...
    def Tag(self, tag: Incomplete) -> None: ...
    def attributes(self, tag: Incomplete) -> Incomplete: ...
    def repr_attribute(self, attrs: Incomplete, name: Incomplete) -> Incomplete: ...
    def getstyle(self, tag: Incomplete) -> Incomplete: ...

class HtmlVisitor(SimpleUnicodeVisitor):
    single: Incomplete
    inline: Incomplete
    def repr_attribute(self, attrs: Incomplete, name: Incomplete) -> Incomplete: ...

class _escape:
    escape: Incomplete
    charef_rex: Incomplete
    def __init__(self) -> None: ...
    def __call__(self, ustring: Incomplete) -> Incomplete: ...

escape: Incomplete
