from .exceptions import ConnectionInterrupted as ConnectionInterrupted
from _typeshed import Incomplete
from django.core.cache.backends.base import BaseCache
from typing import Any, Callable, Dict, Optional

CONNECTION_INTERRUPTED: Incomplete

def omit_exception(
    method: Optional[Callable[[Incomplete], Incomplete]] = ..., return_value: Optional[Any] = ...
) -> Incomplete: ...

class RedisCache(BaseCache):
    logger: Incomplete
    def __init__(self, server: str, params: Dict[str, Any]) -> None: ...
    @property
    def client(self) -> Incomplete: ...
    def set(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def incr_version(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def add(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def get(
        self,
        key: Incomplete,
        default: Incomplete | None = ...,
        version: Incomplete | None = ...,
        client: Incomplete | None = ...,
    ) -> Incomplete: ...
    def delete(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def delete_pattern(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def delete_many(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def clear(self) -> Incomplete: ...
    def get_many(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def set_many(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def incr(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def decr(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def has_key(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def keys(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def iter_keys(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def ttl(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def pttl(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def persist(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def expire(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def expire_at(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def pexpire(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def pexpire_at(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def lock(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def close(self, **kwargs: Incomplete) -> None: ...
    def touch(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
