from ..constants import IS_WINDOWS_PLATFORM as IS_WINDOWS_PLATFORM
from .fnmatch import fnmatch as fnmatch
from _typeshed import Incomplete

def tar(
    path: Incomplete,
    exclude: Incomplete | None = ...,
    dockerfile: Incomplete | None = ...,
    fileobj: Incomplete | None = ...,
    gzip: bool = ...,
) -> Incomplete: ...
def exclude_paths(root: Incomplete, patterns: Incomplete, dockerfile: Incomplete | None = ...) -> Incomplete: ...
def build_file_list(root: Incomplete) -> Incomplete: ...
def create_archive(
    root: Incomplete,
    files: Incomplete | None = ...,
    fileobj: Incomplete | None = ...,
    gzip: bool = ...,
    extra_files: Incomplete | None = ...,
) -> Incomplete: ...
def mkbuildcontext(dockerfile: Incomplete) -> Incomplete: ...
def split_path(p: Incomplete) -> Incomplete: ...
def normalize_slashes(p: Incomplete) -> Incomplete: ...
def walk(root: Incomplete, patterns: Incomplete, default: bool = ...) -> Incomplete: ...

class PatternMatcher:
    patterns: Incomplete
    def __init__(self, patterns: Incomplete) -> None: ...
    def matches(self, filepath: Incomplete) -> Incomplete: ...
    def walk(self, root: Incomplete) -> Incomplete: ...

class Pattern:
    exclusion: bool
    dirs: Incomplete
    cleaned_pattern: Incomplete
    def __init__(self, pattern_str: Incomplete) -> None: ...
    @classmethod
    def normalize(cls, p: Incomplete) -> Incomplete: ...
    def match(self, filepath: Incomplete) -> Incomplete: ...
