from ..api import APIClient as APIClient
from ..constants import DEFAULT_DATA_CHUNK_SIZE as DEFAULT_DATA_CHUNK_SIZE
from ..errors import BuildError as BuildError, ImageLoadError as ImageLoadError, InvalidArgument as InvalidArgument
from ..utils import parse_repository_tag as parse_repository_tag
from ..utils.json_stream import json_stream as json_stream
from .resource import Collection as Collection, Model as Model
from _typeshed import Incomplete

class Image(Model):
    @property
    def labels(self) -> Incomplete: ...
    @property
    def short_id(self) -> Incomplete: ...
    @property
    def tags(self) -> Incomplete: ...
    def history(self) -> Incomplete: ...
    def remove(self, force: bool = ..., noprune: bool = ...) -> Incomplete: ...
    def save(self, chunk_size: Incomplete = ..., named: bool = ...) -> Incomplete: ...
    def tag(self, repository: Incomplete, tag: Incomplete | None = ..., **kwargs: Incomplete) -> Incomplete: ...

class RegistryData(Model):
    image_name: Incomplete
    def __init__(self, image_name: Incomplete, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    @property
    def id(self) -> Incomplete: ...
    @property
    def short_id(self) -> Incomplete: ...
    def pull(self, platform: Incomplete | None = ...) -> Incomplete: ...
    def has_platform(self, platform: Incomplete) -> Incomplete: ...
    attrs: Incomplete
    def reload(self) -> None: ...

class ImageCollection(Collection):
    model = Image
    def build(self, **kwargs: Incomplete) -> Incomplete: ...
    def get(self, name: Incomplete) -> Incomplete: ...
    def get_registry_data(self, name: Incomplete, auth_config: Incomplete | None = ...) -> Incomplete: ...
    def list(self, name: Incomplete | None = ..., all: bool = ..., filters: Incomplete | None = ...) -> Incomplete: ...
    def load(self, data: Incomplete) -> Incomplete: ...
    def pull(
        self, repository: Incomplete, tag: Incomplete | None = ..., all_tags: bool = ..., **kwargs: Incomplete
    ) -> Incomplete: ...
    def push(self, repository: Incomplete, tag: Incomplete | None = ..., **kwargs: Incomplete) -> Incomplete: ...
    def remove(self, *args: Incomplete, **kwargs: Incomplete) -> None: ...
    def search(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def prune(self, filters: Incomplete | None = ...) -> Incomplete: ...
    def prune_builds(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...

def normalize_platform(platform: Incomplete, engine_info: Incomplete) -> Incomplete: ...
