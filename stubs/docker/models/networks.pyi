from ..api import APIClient as APIClient
from ..utils import version_gte as version_gte
from .containers import Container as Container
from .resource import Collection as Collection, Model as Model
from _typeshed import Incomplete

class Network(Model):
    @property
    def name(self) -> Incomplete: ...
    @property
    def containers(self) -> Incomplete: ...
    def connect(self, container: Incomplete, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def disconnect(self, container: Incomplete, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def remove(self) -> Incomplete: ...

class NetworkCollection(Collection):
    model = Network
    def create(self, name: Incomplete, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...  # type: ignore[override]
    def get(self, network_id: Incomplete, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...  # type: ignore[override]
    def list(self, *args: Incomplete, **kwargs: Incomplete) -> Incomplete: ...
    def prune(self, filters: Incomplete | None = ...) -> Incomplete: ...
